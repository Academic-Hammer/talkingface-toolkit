{'ContentEncoder': {'act': 'relu', 'bank_scale': 1, 'bank_size': 8, 'c_bank': 128, 'c_h': 128, 'c_in': 512, 'c_out': 128, 'dropout_rate': 0, 'kernel_size': 5, 'n_conv_blocks': 6, 'subsample': [1, 2, 1, 2, 1, 2]}, 'Decoder': {'act': 'relu', 'c_cond': 128, 'c_h': 128, 'c_in': 128, 'c_out': 512, 'dropout_rate': 0, 'kernel_size': 5, 'n_conv_blocks': 6, 'sn': False, 'upsample': [2, 1, 2, 1, 2, 1]}, 'SpeakerEncoder': {'act': 'relu', 'bank_scale': 1, 'bank_size': 8, 'c_bank': 128, 'c_h': 128, 'c_in': 512, 'c_out': 128, 'dropout_rate': 0, 'kernel_size': 5, 'n_conv_blocks': 6, 'n_dense_blocks': 6, 'subsample': [1, 2, 1, 2, 1, 2]}, 'annealing_iters': 20000, 'data_loader': {'batch_size': 128, 'frame_size': 1, 'segment_size': 128, 'shuffle': True}, 'lambda': {'lambda_kl': 1, 'lambda_rec': 10}, 'optimizer': {'amsgrad': True, 'beta1': 0.9, 'beta2': 0.999, 'grad_norm': 5, 'lr': 0.0005, 'weight_decay': 0.0001}}
Namespace(attr='./autodl-fs/preprocessed_data/attr.pkl', config='./saved/adaptive_vc/vctk_model.config.yaml', model='./saved/adaptive_vc/vctk_model.ckpt', output='./result/evaluate/eval2.wav', sample_rate=24000, source='./autodl-fs/VCTK-Corpus/wav48/p231/p231_006.wav', target='./autodl-fs/VCTK-Corpus/wav48/p253/p253_030.wav')
AE(
  (speaker_encoder): SpeakerEncoder(
    (act): ReLU()
    (conv_bank): ModuleList(
      (0): Conv1d(512, 128, kernel_size=(1,), stride=(1,))
      (1): Conv1d(512, 128, kernel_size=(2,), stride=(1,))
      (2): Conv1d(512, 128, kernel_size=(3,), stride=(1,))
      (3): Conv1d(512, 128, kernel_size=(4,), stride=(1,))
      (4): Conv1d(512, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(512, 128, kernel_size=(6,), stride=(1,))
      (6): Conv1d(512, 128, kernel_size=(7,), stride=(1,))
      (7): Conv1d(512, 128, kernel_size=(8,), stride=(1,))
    )
    (in_conv_layer): Conv1d(1536, 128, kernel_size=(1,), stride=(1,))
    (first_conv_layers): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (2): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (4): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
    )
    (second_conv_layers): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
      (2): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
      (4): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
    )
    (pooling_layer): AdaptiveAvgPool1d(output_size=1)
    (first_dense_layers): ModuleList(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): Linear(in_features=128, out_features=128, bias=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Linear(in_features=128, out_features=128, bias=True)
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Linear(in_features=128, out_features=128, bias=True)
    )
    (second_dense_layers): ModuleList(
      (0): Linear(in_features=128, out_features=128, bias=True)
      (1): Linear(in_features=128, out_features=128, bias=True)
      (2): Linear(in_features=128, out_features=128, bias=True)
      (3): Linear(in_features=128, out_features=128, bias=True)
      (4): Linear(in_features=128, out_features=128, bias=True)
      (5): Linear(in_features=128, out_features=128, bias=True)
    )
    (output_layer): Linear(in_features=128, out_features=128, bias=True)
    (dropout_layer): Dropout(p=0)
  )
  (content_encoder): ContentEncoder(
    (act): ReLU()
    (conv_bank): ModuleList(
      (0): Conv1d(512, 128, kernel_size=(1,), stride=(1,))
      (1): Conv1d(512, 128, kernel_size=(2,), stride=(1,))
      (2): Conv1d(512, 128, kernel_size=(3,), stride=(1,))
      (3): Conv1d(512, 128, kernel_size=(4,), stride=(1,))
      (4): Conv1d(512, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(512, 128, kernel_size=(6,), stride=(1,))
      (6): Conv1d(512, 128, kernel_size=(7,), stride=(1,))
      (7): Conv1d(512, 128, kernel_size=(8,), stride=(1,))
    )
    (in_conv_layer): Conv1d(1536, 128, kernel_size=(1,), stride=(1,))
    (first_conv_layers): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (2): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (4): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
    )
    (second_conv_layers): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
      (2): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
      (4): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(2,))
    )
    (norm_layer): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (mean_layer): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    (std_layer): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    (dropout_layer): Dropout(p=0)
  )
  (decoder): Decoder(
    (act): ReLU()
    (in_conv_layer): Conv1d(128, 128, kernel_size=(1,), stride=(1,))
    (first_conv_layers): ModuleList(
      (0): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (2): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (4): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
    )
    (second_conv_layers): ModuleList(
      (0): Conv1d(128, 256, kernel_size=(5,), stride=(1,))
      (1): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (2): Conv1d(128, 256, kernel_size=(5,), stride=(1,))
      (3): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
      (4): Conv1d(128, 256, kernel_size=(5,), stride=(1,))
      (5): Conv1d(128, 128, kernel_size=(5,), stride=(1,))
    )
    (norm_layer): InstanceNorm1d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
    (conv_affine_layers): ModuleList(
      (0): Linear(in_features=128, out_features=256, bias=True)
      (1): Linear(in_features=128, out_features=256, bias=True)
      (2): Linear(in_features=128, out_features=256, bias=True)
      (3): Linear(in_features=128, out_features=256, bias=True)
      (4): Linear(in_features=128, out_features=256, bias=True)
      (5): Linear(in_features=128, out_features=256, bias=True)
      (6): Linear(in_features=128, out_features=256, bias=True)
      (7): Linear(in_features=128, out_features=256, bias=True)
      (8): Linear(in_features=128, out_features=256, bias=True)
      (9): Linear(in_features=128, out_features=256, bias=True)
      (10): Linear(in_features=128, out_features=256, bias=True)
      (11): Linear(in_features=128, out_features=256, bias=True)
    )
    (out_conv_layer): Conv1d(128, 512, kernel_size=(1,), stride=(1,))
    (dropout_layer): Dropout(p=0)
  )
)
Load model from ./saved/adaptive_vc/vctk_model.ckpt
wav result in result/evaluate/eval1.wav